import os, sys
from subprocess import call

agents = ['ModelAgent']
world = 'Environment'
namespaceAgents = ['Model']


pandora_path = os.getenv('PANDORAPATH', '/usr/local/pandora')
grass64_path = os.getenv('GRASS64_PATH', '/usr/lib/grass64')

vars = Variables('custom.py')
vars.Add(BoolVariable('debug', 'compile with debug flags', 'no'))
vars.Add(BoolVariable('edebug', 'compile with extreme debug logs', 'no'))


env = Environment(variables=vars, ENV=os.environ, CXX='mpicxx')
Help(vars.GenerateHelpText(env))

# All the model source files
sources = Glob('*.cxx') + Glob('utils/*.cxx')  + Glob('controllers/*.cxx') + Glob('controllers/mdp/*.cxx')

sys.path.append(pandora_path + '/bin')
import generateMpi
generateMPICodeBuilder = Builder(action=generateMpi.execute)
env.Append( BUILDERS = {'GenerateMPICode' : generateMPICodeBuilder})

release = True if int(ARGUMENTS.get('release', 1)) == 1 else False
extremeDebug = ARGUMENTS.get('edebug', 0)
executable_name = "simulation{}.bin".format('.debug' if env['debug'] else '')

 
# Flags common to all environments:
env.Append(LINKFLAGS = '-fopenmp')
env.Append(CCFLAGS = ['-DTIXML_USE_STL', '-Wall', '-pedantic', '-std=c++0x' ])
env.Append(CPPPATH = ['.', '../libs/mdp-engine', pandora_path + '/include'])
env.Append(LIBPATH = [pandora_path + '/lib', grass64_path + '/lib'])

# Environment-dependen flags:
if env['debug']:
    env.Append( CCFLAGS = ['-g', '-O0', '-DPANDORADEBUG'] )
    if env['edebug']:
        env.Append(CCFLAGS = '-DPANDORAEDEBUG')
    env.Append(LIBS = 'pandorad')
else:
    env.Append( CCFLAGS = ['-O3'] )
    env.Append(LIBS = 'pandora')


# add the list of mpi code that must be generated & compiled
mpiAgentsSrc = ['mpiCode/FactoryCode.cxx']
agentsSrc = ['main.cxx']
for agent in agents:
	agentsSrc.append(agent + ".cxx")
	mpiAgentsSrc.append("mpiCode/" + agent + "_mpi.cxx")

env['namespaces'] = namespaceAgents
env.GenerateMPICode( target=mpiAgentsSrc, source=agentsSrc)
env.Depends('world' + '.hxx', mpiAgentsSrc)

env.Program(executable_name, sources + mpiAgentsSrc)

# Build a static library to be used from the test suite, etc.
#env.StaticLibrary("modelX", sources + mpiAgentsSrc)

