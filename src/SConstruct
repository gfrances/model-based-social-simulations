import os, sys
from subprocess import call

agents = ['ModelAgent']
world = 'Environment'
namespaceAgents = ['Model']

def get_envvar(varname, default=None):
	return os.environ[varname] if varname in os.environ else default


pandora_path = ARGUMENTS.get('pandora', get_envvar('PANDORA_PATH'))
grass64_path = get_envvar('GRASS64_PATH', '/usr/lib/grass64')

release = True if int(ARGUMENTS.get('release', 1)) == 1 else False
extremeDebug = ARGUMENTS.get('edebug', 0)
executable_name = "simulation{}.bin".format('' if release else '.debug')

env = Environment(ENV=os.environ, CXX='mpicxx')

sys.path.append(pandora_path+'/scripts/')
import generateMpi 

generateMPICodeBuilder = Builder(action=generateMpi.execute)
env.Append( BUILDERS = {'GenerateMPICode' : generateMPICodeBuilder})

linkFlags = Split('-fopenmp')
libs = Split('tinyxml pthread grass_gis grass_datetime mpl')

# Compilation flags common to all options
env.Append( CCFLAGS = ['-DTIXML_USE_STL', '-fopenmp', '-Wall', '-pedantic', '-std=c++0x' ] )

if release:
	env.Append( CCFLAGS = ['-O3'] )
	libs += ['pandora']
else:
	env.Append( CCFLAGS = ['-g', '-O0', '-DPANDORADEBUG'] )
	if int(extremeDebug)==1:
		env.Append( CCFLAGS = ['-DPANDORAEDEBUG'] )
	libs += ['pandorad']	

includeDirs = ['.', '../libs/mdp-engine', '/usr/local/include', pandora_path]
#includeDirs += ['/usr/local/hdf5/include','/usr/lib/grass64/include/','/usr/include/gdal/']
libDirs = [pandora_path, '/usr/local/lib', grass64_path + '/lib']

sources = Glob('*.cxx') + Glob('controllers/*.cxx') + Glob('controllers/mdp/*.cxx')

# add the list of mpi code that must be generated & compiled
mpiAgentsSrc = ['mpiCode/FactoryCode.cxx']
agentsSrc = ['main.cxx']
for agent in agents:
	agentsSrc.append(agent + ".cxx")
	mpiAgentsSrc.append("mpiCode/" + agent + "_mpi.cxx")

env['namespaces'] = namespaceAgents
env.GenerateMPICode( target=mpiAgentsSrc, source=agentsSrc)
env.Depends(world+'.hxx',mpiAgentsSrc)

env.Program(executable_name, sources + mpiAgentsSrc, CPPPATH=includeDirs, LIBS=libs, LIBPATH=libDirs, LINKFLAGS=linkFlags)

# Build a static library to be used from the test suite, etc.
env.StaticLibrary("modelX", sources + mpiAgentsSrc, CPPPATH=includeDirs, LIBS=libs, LIBPATH=libDirs, LINKFLAGS=linkFlags)

